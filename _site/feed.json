{
    "version": "https://jsonfeed.org/version/1",
    "title": "Marlon Etheredge",
    "home_page_url": "http://localhost:4000/",
    "feed_url": "http://localhost:4000/feed.json",
    "description": "A personal website.",
    "icon": "http://localhost:4000/apple-touch-icon.png",
    "favicon": "http://localhost:4000/favicon.ico",
    "expired": false,
    
    "author": "{"email"=>"website.flq0z@passmail.net", "url"=>"https://frnd.at"}",
    
"items": [
    
        {
            "id": "http://localhost:4000/2024/10/08/warp-shader",
            "title": "Warp shader",
            "summary": "A post describing a shader effect.",
            "content_text": "The previous version of this website featured a background that aligned with its retro aesthetic, created using a multi-pass GLSL shader.The effect can be seen below.      Two shaders are used to create the effect: the first generates a “warp” effect by stepping through a noise function, while the second is a post-processing shader that adds jitter and chromatic aberration. This effect utilizes two render passes, with the “warp” shader rendering to a render target and the post-processing shader rendering to the default frame buffer using the previously generated render target.Warp effectvarying vec2 UV;uniform float Time;uniform vec2 Resolution;float noise(vec2 x) {    return fract(sin(dot(x / 500.0, vec2(12.9898, 78.233))) * 43758.5453);}void main() {    vec3 r = vec3(2.0 * (gl_FragCoord.xy - Resolution * 0.5) / Resolution, (sin(Time * 0.01) * 0.5 + 0.5) * 0.6 + 0.4);    float o = Time * 0.08;    vec3 c = vec3(0.0);    vec3 s = r / max(abs(r.x), abs(r.y));    vec3 p = 2.0 * s + 0.1;    for (int i = 0; i &lt; 20; ++i, p += s) {        vec3 d = vec3(30.0 * fract(noise(round(p.xy)) - o) - p.z);        c += max(vec3(0.0), vec3(0.9) - abs(d * vec3(0.76))) * d;    }    gl_FragColor = vec4(c, 1.0);}Post-processing effectvarying vec2 UV;uniform float Time;uniform sampler2D Tex;const vec2 randConst = vec2(12.9898, 78.233);const float randMultiplier = 43758.5453;const float smoothstepWidth = 0.02;const float textureOffsets[3] = float[](0.010, 0.005, 0.000);void main() {    vec2 uv = UV;    float smoothstepRange = 1.0 / 15.0;    float smoothstepStart = smoothstepRange * (floor(Time * 0.5 / smoothstepRange));    float smoothstepEnd = smoothstepStart + smoothstepRange;    float smoothstepValue = smoothstep(smoothstepStart, smoothstepEnd, uv.y);    float o = 0.01 * sin(1.0 - tan(Time * 0.005));    uv.x += (smoothstepValue * o) - ((1.0 - smoothstepValue) * o);    uv.x += fract(sin(dot(vec2(Time * 0.00001, floor(uv.y * 200.0) / 200.0), randConst)) * randMultiplier) * 0.005;    vec4 texValue = vec4(0.0, 0.0, 0.0, 1.0);    for (int i = 0; i &lt; 3; ++i) {        texValue[i] = texture(Tex, uv + vec2(textureOffsets[i], 0.0)).r;    }    texValue.w = 1.0;    gl_FragColor = texValue;}",
            "content_html": "<p>The previous version of this website featured a background that aligned with its retro aesthetic, created using a multi-pass GLSL shader.</p><p>The effect can be seen below.</p><div class=\"shader\">  <script type=\"text/javascript\" src=\"/assets/js/three.min.js\"></script>  <canvas id=\"c\"></canvas>  <script type=\"text/javascript\" src=\"/assets/js/warp-shader.js\"></script></div><p>Two shaders are used to create the effect: the first generates a “warp” effect by stepping through a noise function, while the second is a post-processing shader that adds jitter and chromatic aberration. This effect utilizes two render passes, with the “warp” shader rendering to a render target and the post-processing shader rendering to the default frame buffer using the previously generated render target.</p><h2 id=\"warp-effect\">Warp effect</h2><pre><code class=\"language-c\">varying vec2 UV;uniform float Time;uniform vec2 Resolution;float noise(vec2 x) {    return fract(sin(dot(x / 500.0, vec2(12.9898, 78.233))) * 43758.5453);}void main() {    vec3 r = vec3(2.0 * (gl_FragCoord.xy - Resolution * 0.5) / Resolution, (sin(Time * 0.01) * 0.5 + 0.5) * 0.6 + 0.4);    float o = Time * 0.08;    vec3 c = vec3(0.0);    vec3 s = r / max(abs(r.x), abs(r.y));    vec3 p = 2.0 * s + 0.1;    for (int i = 0; i &lt; 20; ++i, p += s) {        vec3 d = vec3(30.0 * fract(noise(round(p.xy)) - o) - p.z);        c += max(vec3(0.0), vec3(0.9) - abs(d * vec3(0.76))) * d;    }    gl_FragColor = vec4(c, 1.0);}</code></pre><h2 id=\"post-processing-effect\">Post-processing effect</h2><pre><code class=\"language-c\">varying vec2 UV;uniform float Time;uniform sampler2D Tex;const vec2 randConst = vec2(12.9898, 78.233);const float randMultiplier = 43758.5453;const float smoothstepWidth = 0.02;const float textureOffsets[3] = float[](0.010, 0.005, 0.000);void main() {    vec2 uv = UV;    float smoothstepRange = 1.0 / 15.0;    float smoothstepStart = smoothstepRange * (floor(Time * 0.5 / smoothstepRange));    float smoothstepEnd = smoothstepStart + smoothstepRange;    float smoothstepValue = smoothstep(smoothstepStart, smoothstepEnd, uv.y);    float o = 0.01 * sin(1.0 - tan(Time * 0.005));    uv.x += (smoothstepValue * o) - ((1.0 - smoothstepValue) * o);    uv.x += fract(sin(dot(vec2(Time * 0.00001, floor(uv.y * 200.0) / 200.0), randConst)) * randMultiplier) * 0.005;    vec4 texValue = vec4(0.0, 0.0, 0.0, 1.0);    for (int i = 0; i &lt; 3; ++i) {        texValue[i] = texture(Tex, uv + vec2(textureOffsets[i], 0.0)).r;    }    texValue.w = 1.0;    gl_FragColor = texValue;}</code></pre>",
            "url": "http://localhost:4000/2024/10/08/warp-shader",
            
            
            
            
            
            "date_published": "2024-10-08T00:00:00+02:00",
            "date_modified": "2024-10-08T00:00:00+02:00",
            
                "author": 
                "{"email"=>"website.flq0z@passmail.net", "url"=>"https://frnd.at"}"
                
            
        },
    
        {
            "id": "http://localhost:4000/2024/10/08/first-post",
            "title": "First post",
            "summary": "This is the first post.",
            "content_text": "I am the drive that ignites your search,A force for knowledge, where ideas emerge.I lead you to insights, theories, and facts,What am I, if not the will to explore and act?",
            "content_html": "<p>I am the drive that ignites your search,<br />A force for knowledge, where ideas emerge.<br />I lead you to insights, theories, and facts,<br />What am I, if not the will to explore and act?</p>",
            "url": "http://localhost:4000/2024/10/08/first-post",
            
            
            
            
            
            "date_published": "2024-10-08T00:00:00+02:00",
            "date_modified": "2024-10-08T00:00:00+02:00",
            
                "author": 
                "{"email"=>"website.flq0z@passmail.net", "url"=>"https://frnd.at"}"
                
            
        }
    
    ]
}